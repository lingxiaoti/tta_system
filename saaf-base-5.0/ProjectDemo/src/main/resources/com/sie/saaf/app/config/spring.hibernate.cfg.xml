<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jms="http://www.springframework.org/schema/jms"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.2.xsd
       http://www.springframework.org/schema/jms
       http://www.springframework.org/schema/jms/spring-jms-4.1.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
       http://activemq.apache.org/schema/core
       http://activemq.apache.org/schema/core/activemq-core-5.8.0.xsd">

    <aop:config proxy-target-class="true"/>
    <context:annotation-config/>
    <!-- 监听注解支持 -->
    <jms:annotation-driven/>
    <context:component-scan base-package="com.yhg.hibernate.core.dao,com.sie.saaf"/>

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <value>classpath:com/sie/saaf/app/config/db_jdbc.properties</value>
        </property>
    </bean>
    <bean id="dataSource" name="dataSource" destroy-method="close" class="com.sie.saaf.common.util.CustomDriverManagerConnection"
          autowire="byName">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="validationQuery" value="${jdbc.validationQuery}"/>
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <property name="maxIdle" value="${jdbc.maxIdle}"/>
        <property name="minIdle" value="${jdbc.minIdle}"/>
    </bean>


    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan">
            <list>
                <value>com.sie.saaf.**.entities</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.OracleDialect</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.hbm2ddl.auto">none</prop>
                <prop key="javax.persistence.validation.mode">none</prop>
            </props>
        </property>
    </bean>

    <bean id="hibernateTemplete" class="org.springframework.orm.hibernate3.HibernateTemplate">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <!-- 配置事务的传播特性 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="find*" propagation="SUPPORTS"/>
            <tx:method name="*" propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>
    <!-- 那些类的哪些方法参与事务 -->
    <aop:config>
        <aop:pointcut id="businessService"
                      expression="execution(* com.sie.saaf.demo.model.inter.server.*.*(..)))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="businessService" order="0"/>
    </aop:config>
    <aop:config>
        <!-- 日志记录某个类中方法花费时间aop -->
        <!-- Spring 2.0 可以用 AspectJ 的语法定义 Pointcut，这里自定义要拦截方法的包所在 -->
        <aop:advisor id="methodTimeLog2" advice-ref="methodTimeAdvice"
                     pointcut="execution(* com.yhg.hibernate.core.dao..*.*(..))"/>
    </aop:config>
    <bean id="methodTimeAdvice" class="com.yhg.spring.aop.aspect.executetime.MethodTimeActive"/>

    <bean name="genericObjectPoolConfig" class="org.apache.commons.pool2.impl.GenericObjectPoolConfig">
        <property name="maxWaitMillis" value="-1"/>
        <property name="maxTotal" value="1000"/>
        <property name="minIdle" value="8"/>
        <property name="maxIdle" value="100"/>
    </bean>

    <bean id="jedisCluster" class="com.sie.saaf.common.util.CustomRedisConnection">
        <property name="addressConfig">
            <value>classpath:com/sie/saaf/app/config/db_redis.properties</value>
        </property>
        <property name="addressKeyPrefix" value="address"/>
        <property name="timeout" value="300000"/>
        <property name="maxRedirections" value="6"/>
        <property name="genericObjectPoolConfig" ref="genericObjectPoolConfig"/>
        <property name="password" value="nVhalZs7FNiVul4jg+Q48Q=="/>
    </bean>

    <bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="failover:(tcp://139.159.229.31:61616,tcp://139.159.229.33:61616)"/>
        <property name="useAsyncSend" value="true"></property>
        <property name="redeliveryPolicy">
            <bean id="redeliveryPolicy" class="org.apache.activemq.RedeliveryPolicy">
                <!--是否在每次尝试重新发送失败后,增长这个等待时间-->
                <property name="useExponentialBackOff" value="true"></property>
                <!--重发次数,默认为6次-->
                <property name="maximumRedeliveries" value="3"></property>
                <!--重发时间间隔,默认为1秒-->
                <property name="initialRedeliveryDelay" value="1000"></property>
                <!--第一次失败后重新发送之前等待500毫秒,第二次失败再等待500 * 2毫秒,这里的2就是value-->
                <property name="backOffMultiplier" value="2"></property>
                <!--最大传送延迟，只在useExponentialBackOff为true时有效（V5.5），假设首次重连间隔为10ms，倍数为2，那么第 二次重连时间间隔为 20ms，第三次重连时间间隔为40ms，当重连时间间隔大的最大重连时间间隔时，以后每次重连时间间隔都为最大重连时间间隔。-->
                <property name="maximumRedeliveryDelay" value="1000"></property>
            </bean>
        </property>
    </bean>

    <!-- 配置JMS模板（Queue），Spring提供的JMS工具类，它发送、接收消息。 -->
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="receiveTimeout" value="10000"/>
    </bean>

    <bean id="producerService" class="com.yhg.activemq.framework.queue.ProducerServiceImpl">
        <property name="jmsTemplate" ref="jmsTemplate"></property>
    </bean>


    <bean id="jmsListenerContainerFactory" class="org.springframework.jms.config.DefaultJmsListenerContainerFactory">
        <property name="connectionFactory" ref="connectionFactory"/>
    </bean>


    <bean id="transactionConsistencyCore" class="com.yhg.transaction.compensation.core.TransactionConsistencyCore">
        <property name="jedisCluster" ref="jedisCluster"></property>
        <property name="producerService" ref="producerService"></property>
        <property name="restTemplate" ref="restTemplate"/>
    </bean>

    <bean id="saveMessage2Redis" class="com.yhg.transaction.compensation.core.TransactionCompensationIdempotentCore">
        <property name="jedisCluster" ref="jedisCluster"></property>
        <property name="redisKeyName" value="MQ_Message"></property>
        <property name="mapIndexKeyName" value="mq_Message_Index"></property>
        <!--如果没有idempotentKey属性默认为idempotent_key值-->
        <property name="idempotentKey" value="idempotent_key"></property>
        <property name="producerService" ref="producerService"></property>
    </bean>

</beans>
