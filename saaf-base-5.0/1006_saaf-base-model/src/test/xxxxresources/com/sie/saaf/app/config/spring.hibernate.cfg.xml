<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.2.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

    <aop:config proxy-target-class="true"/>
    <context:annotation-config/>
    <context:component-scan base-package="com.yhg.transaction.compensation.core,com.yhg.hibernate.core.dao,com.sie.saaf.*.model.dao,com.sie.saaf.*.model.inter,com.sie.saaf.*.*.model.dao,com.sie.saaf.*.*.model.inter"/>


    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:com/sie/saaf/app/config/db_jdbc.properties</value>
                <value>classpath:com/sie/saaf/app/config/mongodb_cfg.properties</value>
            </list>
        </property>
    </bean>
    <bean name="restTemplate" id="restTemplate" class="org.springframework.web.client.RestTemplate"/>
    <bean id="dataSource" destroy-method="close" class="com.sie.saaf.common.util.CustomDriverManagerConnection">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="validationQuery" value="${jdbc.validationQuery}"/>
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <property name="maxIdle" value="${jdbc.maxIdle}"/>
        <property name="minIdle" value="${jdbc.minIdle}"/>
    </bean>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan">
            <list>
                <value>com.sie.saaf.**.entities</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.OracleDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <!--<prop key="hibernate.hbm2ddl.auto"></prop>-->
                <prop key="javax.persistence.validation.mode">none</prop>
            </props>
        </property>
    </bean>

    <bean id="hibernateTemplete" class="org.springframework.orm.hibernate3.HibernateTemplate">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <!-- 配置事务的传播特性 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="find*" propagation="SUPPORTS"/>
            <tx:method name="*" propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>
    <!-- 那些类的哪些方法参与事务 -->
    <aop:config>
        <aop:pointcut id="businessService" expression="execution(* com.sie.saaf.*.*.model.inter.server.*.*(..))
                                                    || execution(* com.sie.saaf.*.model.dao.readonly.*.*(..))
                                                    || execution(* com.sie.saaf.*.model.inter.server.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="businessService"/>
    </aop:config>


    <bean name="genericObjectPoolConfig" class="org.apache.commons.pool2.impl.GenericObjectPoolConfig">
        <property name="maxWaitMillis" value="-1"/>
        <property name="maxTotal" value="1000"/>
        <property name="minIdle" value="8"/>
        <property name="maxIdle" value="100"/>
    </bean>

    <bean id="jedisCluster" class="com.yhg.redis.framework.facotry.JedisClusterFactory">
        <property name="addressConfig">
            <value>classpath:com/sie/saaf/app/config/db_redis.properties</value>
        </property>
        <property name="addressKeyPrefix" value="address"/>
        <property name="timeout" value="300000"/>
        <property name="maxRedirections" value="6"/>
        <property name="genericObjectPoolConfig" ref="genericObjectPoolConfig"/>
    </bean>

    <!--  将拦截器包装成Advisor-->
    <!--<bean id="putCacheAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">-->
        <!--&lt;!&ndash;  advice属性确定处理bean&ndash;&gt;-->
        <!--<property name="advice" ref="methodPutCacheInterceptor"/>-->
        <!--<property name="patterns">-->
            <!--<list>-->
                <!--&lt;!&ndash;正则表达式&ndash;&gt;-->
                <!--<value>com\.au\.sa\.base.*\.model\.inter\.server.*findCache.*</value>-->
                <!--<value>com\.au\.sa\.base.*\.model\.inter\.server.*queryCache.*</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean id="delCacheAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">-->
        <!--<property name="advice" ref="methodUpdateCacheInterceptor"/>-->
        <!--<property name="patterns">-->
            <!--<list>-->
                <!--<value>com\.au\.sa\.base.*\.model\.inter\.server.*saveCache.*</value>-->
                <!--<value>com\.au\.sa\.base.*\.model\.inter\.server.*updateCache.*</value>-->
                <!--<value>com\.au\.sa\.base.*\.model\.inter\.server.*deleteCache.*</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!-- 历史记录配置(可以注释，但请不要随意删除) -->
    <!--<aop:config>-->
        <!--<aop:pointcut id="recordkHistoryData" expression="execution(* com.yhg.hibernate.core.dao.*.save*(..)) or execution(* com.yhg.hibernate.core.dao.*.update*(..)) or execution(* com.yhg.hibernate.core.dao.*.delete(..))"/>-->
        <!--<aop:aspect id="dataUpdateHistoryAspect" ref="aspectBean">-->
        <!--<aop:after pointcut-ref="recordkHistoryData" method="doAfter"/>-->
        <!--<aop:around pointcut-ref="recordkHistoryData" method="doAround"/>-->
        <!--<aop:after-throwing pointcut-ref="recordkHistoryData" method="doThrowing" throwing="ex"/>-->
        <!--</aop:aspect>-->
    <!--</aop:config>-->
    <!--<bean id="aspectBean" class="com.yhg.spring.aop.aspect.DataUpdateHistoryAspect">-->
        <!--<property name="historyPackagePath" value="com.sie.saaf.history.model.entities"/>-->
        <!--<constructor-arg name="springConfigFilePath" value="classpath:com.sie.saaf.history/config/spring.hibernate.history.cfg.xml"/>-->
    <!--</bean>-->

</beans>