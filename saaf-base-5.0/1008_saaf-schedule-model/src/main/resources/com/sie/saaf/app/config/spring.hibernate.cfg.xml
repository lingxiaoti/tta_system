<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mongo="http://www.springframework.org/schema/data/mongo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.2.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo.xsd">


    <aop:config proxy-target-class="true"/>
    <context:annotation-config/>
    <context:component-scan base-package="com.yhg.hibernate.core.dao,
                                          com.sie.saaf.common,
                                          com.sie.saaf.*.model.dao,
                                          com.sie.saaf.*.model.inter,
                                          com.sie.saaf.*.cache,
                                          com.sie.saaf.*.services,
                                          com.sie.saaf.schedule.utils" />
    
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:com/sie/saaf/app/config/db_jdbc.properties</value>
                <value>classpath:com/sie/saaf/app/config/mongodb_cfg.properties</value>
            </list>
        </property>
    </bean>
    
    <bean id="dataSourceDefault" destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource">
    <!-- <bean id="dataSource" destroy-method="close" class="com.sie.saaf.common.util.CustomDriverManagerConnection"> -->
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="validationQuery" value="${jdbc.validationQuery}"/>
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <property name="maxIdle" value="${jdbc.maxIdle}"/>
        <property name="minIdle" value="${jdbc.minIdle}"/>
    </bean>
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan">
            <list>
                <value>com.sie.saaf.**.entities</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.OracleDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">none</prop>
                <prop key="javax.persistence.validation.mode">none</prop>
            </props>
        </property>
    </bean>
    
    <bean id="hibernateTemplete" class="org.springframework.orm.hibernate3.HibernateTemplate">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    
    <!-- 多数据源配置 start-->

    	<!--外围系统数据源-->
    	<!--<bean id="dataSourceOut" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
            <property name="driverClassName" value="${jdbc.driverClassName}" />
            <property name="url" value="${out.jdbc.url}" />
            <property name="username" value="${out.jdbc.username}" />
            <property name="password" value="${out.jdbc.password}" />
            <property name="validationQuery" value="${out.jdbc.validationQuery}"/>
            <property name="initialSize" value="${out.jdbc.initialSize}"/>
            <property name="maxActive" value="${out.jdbc.maxActive}"/>
            <property name="maxIdle" value="${out.jdbc.maxIdle}"/>
            <property name="minIdle" value="${out.jdbc.minIdle}"/>
    	</bean>-->
        
        
        <bean id="dataSource" class="com.sie.saaf.schedule.utils.DynamicDataSource">
            <property name="targetDataSources">
                <map key-type="java.lang.String">
                 	<entry key="dataSourceDefault"  value-ref="dataSourceDefault"></entry>
                    <!--<entry key="dataSourceOut"  value-ref="dataSourceOut"></entry>-->
                </map>
            </property>
            <property name="defaultTargetDataSource" ref="dataSourceDefault"></property>
        </bean>

    <!-- 多数据源配置end -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource">
            <ref bean="dataSource" />
        </property>
    </bean>

    <!-- 配置事务的传播特性 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="find*" propagation="SUPPORTS"/>
            <tx:method name="*" propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>
    <!-- 那些类的哪些方法参与事务 -->
    <aop:config>
        <aop:pointcut id="businessService" expression="execution(* com.sie.saaf.*.*.model.inter.server.*.*(..))
                                                    || execution(* com.sie.saaf.*.model.inter.server.*.*(..))
                                                    || execution(* com.sie.saaf.schedule.listener.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="businessService"/> 
    </aop:config>

    <bean name="genericObjectPoolConfig" class="org.apache.commons.pool2.impl.GenericObjectPoolConfig">
        <property name="maxWaitMillis" value="-1"/>
        <property name="maxTotal" value="1000"/>
        <property name="minIdle" value="8"/>
        <property name="maxIdle" value="100"/>
    </bean>

    <bean id="jedisCluster" class="com.sie.saaf.common.util.CustomRedisConnection">
        <property name="addressConfig">
            <value>classpath:com/sie/saaf/app/config/db_redis.properties</value>
        </property>
        <property name="addressKeyPrefix" value="address"/>
        <property name="timeout" value="300000"/>
        <property name="maxRedirections" value="6"/>
        <property name="genericObjectPoolConfig" ref="genericObjectPoolConfig"/>
        <!--<property name="password" value="0u++DZkInx+DZy1UZZSw1A=="/>-->
        <property name="password" value="nVhalZs7FNiVul4jg+Q48Q=="/> <!--123456 -->
    </bean>
    <!-- 配置调度模块 start-->
    <bean id="schedulerListener" class="com.sie.saaf.schedule.listener.GlobalSchedulerListener"></bean>
    <bean id="globalJobListener" class="com.sie.saaf.schedule.listener.GlobalJobListener"></bean>
    <bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="schedulerListeners">
            <list>
                <ref bean="schedulerListener"/>
            </list>
        </property>
        <property name="globalJobListeners">
            <list>
                <ref bean="globalJobListener"/>
            </list>
        </property>
        <property name="dataSource" ref="dataSource"/>
        <property name="schedulerName" value="myScheduler"/>
        <property name="overwriteExistingJobs" value="true"/>
        <property name="configLocation" value="classpath:com/sie/saaf/app/config/quartz.properties"/>
    </bean>
    <!-- 配置调度模块 end-->

    <!-- 定义mongo对象，对应的是mongodb官方jar包中的Mongo，replica-set设置集群副本的ip地址和端口 -->
    <mongo:mongo-client id="mongo" replica-set="${mongo.hostport}">
        <!-- 一些连接属性的设置 -->
        <mongo:client-options connections-per-host="${mongo.connectionsPerHost}"
                              threads-allowed-to-block-for-connection-multiplier="${mongo.threadsAllowedToBlockForConnectionMultiplier}"
                              connect-timeout="${mongo.connectTimeout}"
                              max-wait-time="${mongo.maxWaitTime}"
                              socket-keep-alive="${mongo.socketKeepAlive}"
                              socket-timeout="${mongo.socketTimeout}"/>
    </mongo:mongo-client>
    <!-- mongo的工厂，通过它来取得mongo实例,dbname为mongodb的数据库名，没有的话会自动创建 -->
    <mongo:db-factory dbname="scheduleLog" mongo-ref="mongo"/>
    <bean id="mongoTemplate" name="mongoTemplate"
          class="org.springframework.data.mongodb.core.MongoTemplate">
        <constructor-arg ref="mongo"/>
        <constructor-arg name="databaseName" value="scheduleLog"/>
    </bean>

</beans>